#+title: A gentle introduction to Common Lisp

* Preface

I thought taking advantage of =org-babel= would be nice as one works
through programming books. It encourages you to play around while
taking notes, or just organizing your scratch when you don't take any
notes (which is more up my alley). It's easy to find these books
rather boring, but I think that's due to a lack of engagement (not
doing the exercises). If it's frictionless, then it's a little
rewarding to use the knowledge you just acquired. Only by involving
yourself will you remember and learn something.

Although I got through a good portion of the book by skimming, now
I'll restart and go through the exercises, putting concepts into my
own words when necessary.


* Chapter 1: Functions and Data
Mostly a cursory overview on how computer languages work.

#+begin_src lisp
  ;; ratios
  (/ 8 2)
  (/ 2 8)

  ;; 1.1 exercise answers
  ;; 13
  ;; 3
  ;; /
  ;; 3
  ;; 3
  ;; -48
  ;; 5/3
  (/ 15 9)
  ;; 0
  (+ 8 0)
  ;; -
  (- 5 6)
  ;; 2/3
  (- 1 1/3)
  ;; 2
  (abs (+ -5 3))

#+end_src

** symbols
My initial understanding of symbols are that they're just pointers. A
more convenient way to reference data.
BUT symbols can exist without any reference. I'm sure this'll clear up
more later on.
i.e.
#+begin_src lisp
(symbol-value 'cat)
#+end_src
Throws an error.

*** 1.2 exercise answers
S, I, S, S, I, I, I, S, S, I, I, S

** predicates

#+begin_src lisp
  (numberp 2)
  (symbolp 'cat)
  (zerop 0)
  (oddp 3)
  (evenp 29)
  (< 2 3)
  (< 3 2)
  (> 2 3)

  (equalp 1 1.0)
#+end_src

*** 1.3 exercise
#+begin_src lisp
  ;; t
  (< 7 11)
  ;; nil
  (oddp 12)
  ;; nil
  ;; t
  ;; t
  (< -4 -3)
  ;; t
  ;; nil
  (equal -9 9)
#+end_src

** creating functions

#+begin_src lisp
  (defun add1 (n)
    (+ n 1))

  (add1 5)

  (defun add2 (n)
    (add1
     (add1 n)))

  (add2 5)

  (defun twop (n)
    (equal 2 n))
  (twop 2)
#+end_src
*** exercises
#+begin_src lisp
  ;; define a sub2 func that subs two from input
  (defun sub2 (n)
    (- n 2))

  (sub2 2)
  ;; show how to write twop in terms of zerop and sub2
  (defun twop (n)
    (zerop
     (sub2 n)))

  (twop 2)
  ;; the half func returns num one-half of its input
  ;; show how to define half two diff ways
  (defun half (n)
    (/ n 2))

  (defun half (n)
    (* 0.5 n))

  (half 10)

  ;; write multi-digit-p pred that ret true if input is > 9
  (defun multi-digit-p (n)
    "Returns true if N has more than 1 digit"
    (> (abs n) 9))

  (multi-digit-p -9)
  (multi-digit-p -11)

  ;; following function negates the input
  (defun negate (n)
    (- 0 n))
  (negate 9)

  ;; 1.9
  (defun twomorep (x y)
    (equal x (add2 y)))
  (twomorep 9 7)

  ;; 1.10
  (defun twomorep (x y)
    (equal (sub2 x) y))
  (twomorep 9 7)

  ;; 1.11
  (defun average (x y)
    (/ (+ x y) 2))
  (average 10 20)

  ;; 1.12
  (defun more-than-half-p (x y)
    (> x (/ y 2)))

  (more-than-half-p 4 6)

  ;; 1.13: true, since nil or t are symbols and those are the only
  ;; available return values from numberp
#+end_src

** not predicate/negating predicate
*** exercises
#+begin_src lisp
  ;; 1.14
  ;; t
  (not nil)
  ;; nil
  (not 12)
  ;; nil
  (not #'not)

  ;; 1.15 write pred not-onep that ret T if input != 1
  (defun not-onep (n)
    (not (equal 1 n)))
  (not-onep 2)

  ;; 1.16 write pred not-plusp that ret t if input not > 0
  (defun not-plusp (n)
    (not (> n 0)))
  (not-plusp -3)

  ;; 1.17
  (defun my-evenp (n)
    (not (oddp n)))
  (my-evenp 2)

  ;; .18, returns T if N = -2
  (defun pred18 (n)
    (zerop 
     (add1
      (add1 n))))
  (pred18 -2)

  ;; .19 nil -> nil
  ;; t -> t
  ;; not all data, symbols are transformed to t
  (defun dubnot (n)
    (not (not n)))
  (dubnot nil)
  (dubnot t)
  (dubnot 'mysym)

  ;; .20 write xor
  (defun xor (x y)
    (not (equal x y)))
  (xor t nil)
  (xor t t)
  (xor nil nil)
  
#+end_src
** multiple inputs
additive functions are applied w/ multiple while order dependent funcs
clump last args and apply to first
#+begin_src lisp
  (* 50 3 4)
  (- 50 3 4)
  (/ 50 25 2)
  (/ 50)
  (- 4)
  (equal)
#+end_src
** errors
*** exercises
1.21, in order of appearance
- func is adding to a symbol
- equal not supplied 2 args
- not is supplied with too many args

** review
- 1.22 Yes, all predicates are functions, but not all functions are
predicates.
- 1.23 equal, not
- 1.24 NUMBER is not a number, is a symbol. And SYMBOL is another
  symbol.
- 1.25 because FALSE is a symbol, and symbols eval to T. False is
  represented by NIL
- 1.26 a) false, example: < or > do not accept t/nil. (b) is true.
- 1.27:
#+begin_src lisp
  (evenp 'symbol) ;; wrong type input, evenp expects number
  (evenp 2 4) ;; wrong-number-of-inputs error, as evenp wanats only 1 arg
#+end_src



* Chapter 2: Lists
The most important data type :~)
They're composed like linked lists in c, composed of =cons cells=.
2.1 would look the same as the rgb list

2.5
- 5
- 3
- 4
- 3
- 5
- 5

nil and () are equal, only symbol that is a list as well
#+begin_src lisp
    (equal () nil)
  (length nil)
  '((()))
#+end_src
2.6
- () -> nil
- (()) -> (nil)
- ((())) -> ((nil))
- (() ()) -> (nil nil)
- (() (())) -> (nil (nil))

** list extraction
#+begin_src lisp
  (first '(a b c d))
  (second '(a b c d))
  (third '(a b c d))
  (rest '(a b c d))

  (defun my-second (lst)
    (first (rest lst)))

  (my-second '(a b c d))

  ;; 2.8
  (defun my-third (lst)
    (first (rest (rest lst))))
  (my-third '(a b c d ))
  ;; 2.9 use second instead
  (defun my-third (lst)
    (second (rest lst)))

#+end_src

** car/cdr

Car goes inside, while cdr goes to the next.
#+begin_src lisp
  (car '(a b c))
  (cdr '(a b c))
  (cdr '(a))
  (cadr '(a b c))
  (cdar '((a b) b c))
  (caddr '(a b c d))
  ;; 2.12 "ka-dih-dih-der"   
  (cadddr '(a b c d))

  (cadar '((blue cube) (red pyramid)))
  ;; 2.13
  (caaar '(((fun)) (in the) (sun)))
  (caadr '(((fun)) (in the) (sun)))
  (cadadr '(((fun)) (in the) (sun)))
  (caaddr '(((fun)) (in the) (sun)))
  ;; 2.15
  (car '((a b) (c d) (e f)))
  ;; ((e f))
  (cddr '((a b) (c d) (e f)))
  ;; (c d)
  (cadr '((a b) (c d) (e f)))
  ;; cadar -> b
  (cadar '((a b) (c d) (e f)))
  ;; cddar -> nil
  (cddar '((a b) (c d) (e f)))
  ;; caar -> a
  (caar '((a b) (c d) (e f)))
  ;; cdaddr -> (f) 
  (cdaddr '((a b) (c d) (e f)))
  ;; cadaddr -> f, but not supported(..?)
  (car  (cdaddr '((a b) (c d) (e f))))

  ;; 2.17
  ;; post
  (car '(post no bills))
  ;; (no bills)
  (cdr '(post no bills))
  ;; (post no)
  (car '((post no) bills))
  ;; nil
  (cdr '(bills))
  ;; undefined
  (car bills)
  ;; ((no bills))
  (cdr '(post (no bills)))
  ;; nil
  (cdr '((post no bills)))
  ;; nil
  (car nil)

#+end_src

** cons

#+begin_src lisp

  (cons 'a '(b c d))

  (defun greet (lst)
    (cons 'hello lst))

  (greet '(professor higgins))

  (cons 'a nil)

  (cons nil nil)

  (cons '(a b) nil)

  ;; 2.18
  (defun my-make-list (x y)
    (cons x (cons y nil)))
  (my-make-list 'fred 'george)
#+end_src

** list
2.19
- (fred and wilma)
- (fred (and wilma))
- (fred and wilma)
- (nil)
- (nil nil)

#+begin_src lisp
  (defun say-what (lst)
    (cons 'what (cdr lst)))
  (say-what '(take a nap))
#+end_src

2.20
- (nil)
- (t nil)
- (t)
- ((t))
- ((in one ear and) (out the other))
- ((in one ear and) out the other)
#+begin_src lisp

  ;; 2.21

  (defun make-nested-tuple (w x y z)
    (list (list w x)
          (list y z)))
  (make-nested-tuple 'a 'b 'c 'd)
  ;; 2.22

  (defun duo-cons (x y z)
    "add two elements to list w/ cons"
    (cons x (cons y z)))
  (duo-cons 'x 'y '(z))

  ;; 2.23

  (defun two-deeper (lst)
    "add two levels of parens"
    (cons (cons  lst nil) nil))

  (defun two-deeper (lst)
    (list (list lst)))
  (two-deeper 'a)

  ;; 2.24
  (cdr '(((good)) ((night))))
  (caaadr '(((good)) ((night))))
  ;; need to remember that cdr preserves parent parens
#+end_src

** lst predicates

#+begin_src lisp

  (listp nil)
  (consp nil)
  (atom nil)
  (atom 18)
  (null nil)
#+end_src
** review
- 2.25 why do cons cells and cons function share same name?
  because we're creating a cons cell with the cons function.
- 2.26 returns 2 for the first, nil for the second
- 2.27 when the elements themselves are lists
- 2.28, yes, it is possible, as cdr moves the pointer forward and car
  helps navigate nested lists. It may be an extremely long function
  depending on the list, but it's possible, since with both we can
  select every element, as the list is made of cons cells
  
#+begin_src lisp
  ;; 2.29

  (defun unary-add1 (lst)
    (cons 'x lst))
  (unary-add1 '(x x x))
  ;; 2.30 -> subtracts 2
  ;; 2.31
  (defun unary-zerop (lst)
    (zerop (length lst)))
  (unary-zerop nil)
  ;; 2.32
  (defun unary-greaterp (x y)
    (> (length x) (length y)))
  (unary-greaterp '(x y z) '(y z))
  ;; 2.33
  ;; car checks whether the unary number is greater than zero

  (cons 'a 'b)
  ;; 2.34
  (cons 'a
        (cons 'b
              (cons 'c
                    'd)))
  ;; 2.36 since creating lists with only cons requires you to first
  ;; define the end, one cannot set the inside cons cell to the final
  ;; cons cell upon creation. You need a variable

#+end_src

* Chapter 3: eval

#+begin_src lisp
  ;; 3.5
  (defun half (x)
    (/ x 2))
  (half 4)

  (defun cube (x)
    (* x x x))
  (cube 3)

  (defun pythag (x y)
    (sqrt (+ (* x x)
             (* y y))))
  (pythag 3 4)

  (defun miles-per-gallon (init final gals)
    (/ (- final init) gals))
  (miles-per-gallon 10 30 10)
#+end_src

** variables
3.9
- (cons 5 (list 6 7)) -> (5 6 7)
- (cons 5 '(list 6 7)) -> (5 list 6 7)
- (3 from 9 gives 6)
- 6
- (is short for construct)
3.10
#+begin_src lisp
  (third '(the quick brown fox))
  ;; undefined symbol
  (list 2 'and 2 'is 4)
  ;; incorrect type, need to eval length
  (+ 1 (length (list t t t t)))
  ;; undefined list
  (cons 'patrick '(seymour marvin))
  ;; undefined symbols
  (cons 'patrick (list 'seymour 'marvin))
  ;; 3.11
  (defun longer-than (x y)
    (> (length x) (length y)))
  (longer-than '(a b c) '(a b))
  ;; 3.12
  (defun addlength (lst)
    (cons (length lst) lst))
  (addlength '(a b))
  ;; 4 3 a b c
  (addlength (addlength '(a b c)))
  ;; 3.13
  ;; -> 2 params
  ;; -> caller, callee
  ;; (hello wanda this is fred speaking)
  ;; no variable substitution


#+end_src

* Chapter 4: Conditionals

** if
#+begin_src lisp
  (if (oddp 1) 'odd 'even)
  (defun my-abs (x)
    (if (< x 0) (- x) x))
  (my-abs -5)
  (my-abs 5)

  ;; 4.1
  (defun make-even (x)
    (if (oddp x) (+ x 1) x))
  (make-even 3)
  (make-even 4)

  ;; 4.2
  (defun further (x)
    (if 4))

  ;; 4.3
  (defun my-not (x)
    (if (x) nil t))
  ;; 4.4
  (defun ordered (x y)
    (if (> x y) (list y x) (list x y)))
  (ordered 4 3)

  ;; 4.6
  (defun my-abs (x)
    (cond ((< x 0) (- x))
          ((> x 0) x)
          (t x)))
  (my-abs -3)
  (my-abs 0)

  ;; 4.8
  (defun emphasize3 (x)
    (cond ((equal (first x) 'good) (cons 'great (rest x)))
          ((equal (first x) 'bad) (cons 'horrible (rest x)))
          (t (cons 'very x))))
  (emphasize3 '(good day))
  (emphasize3 '(bad day))
  (emphasize3 '(long day))


  ;; 4.9 it always evals to t first
  (defun make-odd (x)
    (cond ((not (oddp x)) (+ x 1))
          (t x)))
  (make-odd 3)
  (make-odd 4)

  ;; 4.10

  (defun constrain (x max min)
    (cond
      ((< x min) min)
      ((> x max) max)
      (t x)))
  (constrain 5 10 3)
  (constrain 2 10 3)
  (constrain 11 10 3)

  ;; 4.11
  (defun firstzero (lst)
    (cond
      ((equal (first lst) 0) 'first)
      ((equal (second lst) 0) 'second)
      ((equal (third lst) 0) 'third)
      (t 'none)))
  (firstzero '(1 0 3))
  (firstzero '(3 1 0))
  (firstzero '(1 0 3))
  (firstzero '(1 1 3))

  ;; 4.12
  (defun cycle (x)
    (cond
      ((< x 99) (+ x 1))
      (t 1)))
  (cycle 1)
  (cycle 99)
  ;; 4.13
  (defun howcompute (x y res)
    (cond
      ((equal (+ x y) res) 'sum-of)
      ((equal (* x y) res) 'product-of)
      (t 'beats-me)))
  ;; could extend it to the other operations, like quotient of

#+end_src

** and/or macros

#+begin_src lisp
  (defun small-positive-oddp (x)
    (and (< x 100)
         (> x 0)
         (oddp x)))


  ;; 4.15
  (defun geq (x y)
    (or (> x y) (equal x y)))
  (geq 4 3)
  (geq 4 4)
  (geq 4 5)
  ;; 4.16

  (defun cond-sqaure (x)
    (cond ((and (oddp x) (> x 0)) (* x x))
          ((and (oddp x) (< x 0)) (* x 2))
          (t (/ x 2))))

  ;; 4.17
  (defun match (s a)
    (or (and (or (equal s 'boy)
                 (equal s 'girl))
             (equal a 'child))
        (and (or (equal s 'man)
                 (equal s 'woman))
             (equal a 'adult))))
  ;; 4.18
  (defun play (p1 p2)
    (cond ((equal p1 p2) 'tie)
          ((is-winner p1 p2) 'first-wins)
          ((is-winner p2 p1) 'second-wins)
          (t 'error)))

  (defun is-winner (player opponent)
    (or (and (equal player 'rock)
             (equal opponent 'scissors))
        (and (equal player 'scissors)
             (equal opponent 'paper))
        (and (equal player 'paper)
             (equal opponent 'rock))))

  (play 'rock 'scissors)
  (play 'scissors 'rock)
  (play 'scissors 'scissors)
  (play 'scissors 'paper)
  (play 'paper 'scissors)
#+end_src

* Chapter 5: Variables

#+begin_src lisp
  (defun average (x y)
    (let ((sum (+ x y)))
      (list x y 'average 'is (/ sum 2.0))))


  (average 8 10)

  (defun poor-style (p)
    (setf p (+ p 5))
    (list 'result 'is p))
  ;; 5.1
  (defun let-style (p)
    (let ((p5 (+ p 5)))
      (list 'result 'is p5)))

  (let-style 5)

  ;; let* does in order assignment, one at a time

  (defun correct-size-range (x y z)
    (let* ((biggest (max x y z))
           (smallest (min x y z))
           (r (/ biggest smallest 1.0)))
      (list 'factor 'of r)))
  (step

 
   (correct-size-range 35 87 4))
  ;; 5.4 because it needs to skip over evaluating the variable name upon
  ;; declaration
  ;; 5.5 I believe so.

  ;; 5.6
  (defun throw-die ()
    "Returns a random number from 1 to 6"
    (+ 1 (random 6)))
  (throw-die)
  (defun throw-dice ()
    (let ((d1 (throw-die))
          (d2 (throw-die)))
      (list d1 d2)))
  (throw-dice)

  (defun snake-eyes-p (throw-outcome)
    (equal throw-outcome '(1 1)))
  (snake-eyes-p '(1 1))

  (defun boxcars-p (throw-outcome)
    (equal throw-outcome '(6 6)))
  (boxcars-p '(6 6))

  (defun instant-win-p (throw-outcome)
    (or (equal 7 (reduce '+ throw-outcome))
        (equal 11 (reduce '+ throw-outcome))))
  (instant-win-p '(5 6))

  (defun instant-loss-p (throw-outcome)
    (or (equal 2 (reduce '+ throw-outcome))
        (equal 3 (reduce '+ throw-outcome))
        (equal 12 (reduce '+ throw-outcome))))
  (instant-loss-p '(6 6))

  (defun say-throw (throw-outcome)
    (cond ((snake-eyes-p throw-outcome) 'snakeeyes)
          ((boxcars-p throw-outcome) 'boxcars)
          (t  (reduce '+ throw-outcome))))
  (say-throw '(1 1))
  (say-throw '(6 6))
  (say-throw '(1 6))

  (defun craps ()
    (let* ((throw-outcome (throw-dice))
           (throw-saying (say-throw throw-outcome))
           (throw-result-print (list 'throw (car throw-outcome) 'and (cadr throw-outcome))))
      (cond ((instant-win-p throw-outcome) (append throw-result-print (list '-- throw-saying '-- 'you 'win)))
            ((instant-loss-p throw-outcome) (append throw-result-print (list '-- throw-saying '-- 'you 'lose)))
            (t (append throw-result-print  (list '-- 'your 'point 'is throw-saying))))))
  (craps)
;; could make this more efficient
  (defun try-for-point (n)
    (let ((throw-outcome (throw-dice)))
      (cond ((equal n (reduce '+ throw-outcome))
             (list 'throw (car throw-outcome) 'and (cadr throw-outcome) '-- (say-throw throw-outcome) '-- 'you 'win))
            ((equal 7 (reduce '+ throw-outcome))
             (list 'throw (car throw-outcome) 'and (cadr throw-outcome) '-- (say-throw throw-outcome) '-- 'you 'lose))
            (t
             (list 'throw (car throw-outcome) 'and (cadr throw-outcome) '-- (say-throw throw-outcome) '-- 'throw 'again)))))

  (try-for-point 6)


#+end_src

* Chapter 6: List Data Structures
#+begin_src lisp

  (cons '(eat at) 'joes)
  (list '(eat at) 'joes)
  (append '(eat at) 'joes)

  (reverse '(1 2 3 4))

  (nthcdr 2 '(a b c d))

  (nth 2 '(a b c . d))

  (last '(always last huh))
  (remove 'a '(b a n a n a))

  ;; 6.6

  (defun last-element (lst)
    (car (last lst)))
  (last-element '(always last huh))

  (defun last-element (lst)
    (car (reverse lst)))

  (defun last-element (lst)
    (nth (- (length lst) 1) lst))
  (last-element '(always last huh))

  ;; 6.7
  (defun next-to-last (lst)
    (second (reverse lst)))

  (defun next-to-last (lst)
    (nth (- (length lst) 2) lst))
  (next-to-last '(always last huh))

  ;; 6.8
  (defun my-butlast (lst)
    (remove (nth (- (length lst) 1) lst) lst))
  (my-butlast '(always last huh))

  ;; 6.9 reduces to 'first
  ;; 6.10

  (defun is-palindrome (lst)
    (equal lst (reverse lst)))
  (is-palindrome '(a b c b a))
  (defun make-palindrome (lst)
    (append lst (reverse lst)))
  (make-palindrome '(a b c))
#+end_src
** sets

#+begin_src lisp
  (setf ducks '(huey dewey louie))

  (member 'huey ducks)

  (defun beforep (x y lst)
    "Returns true if X appears before Y in LST"
    (member y (member x lst)))
  (beforep 'a 'b '(a b c))

  (set-difference '(a a a)
         '(a))
  ;; 6.24
  (defun set-equal (set1 set2)
    (and (subsetp set1 set2)
         (subsetp set2 set1)))

  (defun proper-set (set1 set2)
    (and (subsetp set1 set2)
         (not (subsetp set2 set1))))

  (defun right-side (lst)
    (rest (member '-vs- lst)))
  (right-side '(epic time -vs- time epic))


  (defun left-side (lst)
    (reverse (rest (member '-vs- (reverse lst)))))
  (left-side '(epic2 time2 -vs- time epic))

  (defun count-common (leftlst rightlst)
    (length (intersection leftlst rightlst)))

  (defun compare (lst)
    (list (count-common (left-side lst) (right-side lst)) 'common 'features))

  (compare '(small red metal cube -vs-
             red plastic small cube))
#+end_src
** tables
#+begin_src lisp
  (setf words
        '((one un)
          (two deux)
          (three trois)
          (four quatre)
          (five cinq)))

  (assoc 'three words)

  ;; 6.28
  (setf produce
        '((apple . fruit)
          (celery . veggie)
          (banana . fruit)
          (lettuce . veggie)))

  ;; banana . fruit
  (assoc 'banana produce)
  ;; apple . fruit (first matching one)
  (rassoc 'fruit produce)
  ;; lettuce . veggie
  (assoc 'lettuce produce)
  ;; celery . veggie
  (rassoc 'veggie produce)
  ;; 6.29 length
  (length produce)
  ;; 6.30
  (setf books
        '((war-and-peace leo-tolstoy)
          (catcher-in-the-rye jd-salinger)))
  (defun who-wrote (book-name)
    (second (assoc book-name books)))
  (who-wrote 'catcher-in-the-rye)
  (setf books (reverse books))
  ;; 6.32 act the same, since reverse is top-level

  ;; 6.33 table would have to reverse the entries, so the key is author

  ;; 6.34
  (setf atlas
        '((new-jersey newark princeton trenton)
          (pennsylvania pittsburgh johnstown)
          (ohio columbus)))
  (assoc 'new-jersey atlas)

  ;; 6.36
  (defun my-butlast (lst)
    (remove (nth (- (length lst) 1) lst) lst))
    (my-butlast '(always last huh))

  (defun swap-first-last (lst)
    (let ((last-val (car (last lst)))
          (first-val (first lst)))
      (cons last-val
            (append
             (remove first-val (remove last-val lst))
             (list first-val)))))

  (swap-first-last '(you cant buy love))

  ;; 6.37
  (defun rotate-left (lst)
    (let ((first-val (first lst)))
      (append (remove first-val lst) (list first-val))))

  (rotate-left '(a b c d e))
  (rotate-right '(a b c d e))

  (defun rotate-right (lst)
    (let ((last-val (last lst)))
      (append last-val (remove (car last-val) lst))))

  ;; 6.38
  (set-difference '(y x z a) '(x y z))

  ;; 6.39
  ;; append

  ;; 6.40
  (setf transformed
        '((a b c d)
          (b c d)
          (c d)
          (d)))
  (assoc 'c transformed)
  (member 'c '(a b c d))

  ;; 6.42
  (defun royal-we (lst)
    (subst 'we 'i lst))




  (royal-we '(If I learn lisp I will be pleased))
  (setf text '(b a n a n a p a n d a))
  (remove 'a text)
  (remove 'a text :count 2 :from-end t)


#+end_src
** TODO keyboard exercise & adv list

* Chapter 7: Applicative Programming

#+begin_src lisp
  (funcall #'cons 'a 'b)
  (setf fn #'cons)
  (funcall fn 'c 'd)
  (type-of #'cons)

  (defun square (n) (* n n))

  (mapcar #'square '(1 2 3 4 5))

  ;; 7.1
  (defun add1 (n)
    (+ n 1))
  (mapcar #'1+ '(13 5 7 9))

  ;; 7.2
  (setf daily-planet
        '((olsen jimmy 123-56-1234 cub-reporter)
          (olsen jim 123-55-1234 cub-reporter)
          (olsen joe 123-56-5234 cub-reporter)
          (olsen john 123-56-1034 cub-reporter)))
  (mapcar #'third daily-planet)

  ;; 7.3
  (mapcar #'zerop '(2 0 3 4 0 -5 -6))

  ;; 7.4
  (defun greater-than-5 (n)
    (> n 5))
  (mapcar #'greater-than-5 '(2 7 9 4))

  ;; 7.5
  (lambda (x) (- x 7))
  ;; 7.6
  (lambda (x) (or (equal t x)
             (equal nil x)))
  ;; 7.7
  (mapcar #'(lambda (x) (if (equal x 'down) 'up 'down)) '(up down up up))

  ;; 7.8


  (find-if #'oddp '(2 3 4 5 6))
  (defun my-assoc (key table)
    "find a row within a table"
    (find-if #'(lambda (entry)
                 (equal key (first entry)))
             table))

  (defun rough-equal (x k)
    "Finds first number in list X that is close to K"
    (find-if #'(lambda (num)
                 (and
                  (< num (+ k 10))
                  (> num (- k 10)))) x))

  (rough-equal '(20 11 13) 10)
  ;; 7.9
  (defun find-nested (lst)
    "Finds first list element within LST"
    (find-if #'listp lst))

  (find-nested '(1 ga 32 (test test2)))
  ;; 7.10

  (setf note-table
        '((c 1)
          (c-sharp 2)
          (d 3)
          (d-sharp 4)
          (e 5)
          (f 6)
          (f-sharp 7)
          (g 8)
          (g-sharp 9)
          (a 10)
          (a-sharp 11)
          (b 12)))

  (defun numbers (lst)
    "Translates list LST of note-keys to correspondent numbers"
    (mapcar #'(lambda (note)
                (second (assoc note note-table))) lst))
  (numbers '(e d f c))
  (defun notes (lst)
    "Translates list LST of numbers to correspondent note-keys"
    (mapcar #'(lambda (num)
                (let ((num-indexed (mapcar #'reverse note-table)))
                  (second (assoc num num-indexed)))) lst))

  (notes (notes '(5 4 2 6)))
  ;; d they're going to be nil
  ;; e
  (defun raise (n lst)
    "Adds N to each item in LST"
    (mapcar #'(lambda (num)
                (+ num n)) lst))
  (raise 5 '(5 3 1 3 5 5 5))

  ;; This could be simplified with the mod function
  (defun normalize (lst)
    "Normalizes items in LST to be within octave range of 1-12"
    (mapcar #'(lambda (n)
                (cond ((> n 12) (- n 12))
                      ((< n 1) (+ n 12))
                      (t n))) lst))
  (normalize '(6 10 13))

  ;; with mod
  (defun normalize-mod (lst)
    (mapcar #'(lambda (n)
                (mod n 12)) lst))

  (defun transpose (n song)
    "Transposes the song by N half steps"
    (notes (normalize-mod (raise n (numbers song)))))
  (transpose -1 '(e d c d e e e))


#+end_src

** remove-if
#+begin_src lisp
  (remove-if #'numberp '(2 for 1 sale))


  ;; this is FILTER for lisp
  (remove-if-not #'plusp '(2 0 -4 12 -23))
  (remove-if-not #'symbolp '(3 apples 4 pears 2 plums))

  ;; 7.11
  (defun 2-4 (lst)
    "Grabs numbers between 2-4 inclusive"
    (remove-if-not (lambda (num)
                     (and (> num 1) (< num 5)))
                   lst))
  (2-4 '(5 1 24 5 3 2 4))

  ;; 7.12

  (defun count-the (list)
    "Count number of times 'the' appears in LST"
    (length (remove-if-not (lambda (sym)
                             (equal sym 'the))
                           list)))
  (count-the '(there once was the most magnificant man the world did ever see))

  ;; 7.13
  (defun length-2-only (lst)
    "Filters out lists in LST that aren't length 2"
    (remove-if-not (lambda (minilist)
                     (equal 2 (length minilist)))
                   lst))
  (length-2-only '((2 a f) (2 f)))

  ;; 7.14
  (defun my-intersection (x y)
    "Use remove-if-not to find intersection of two lists X Y"
    (remove-if-not (lambda (e)
                     (member e y))
                   x))
  (my-intersection '(a b c d f)
                   '(a q c g f))
  (my-union '(a b c d f)
            '(a q c g f))

  (defun my-union (x y)
    "Use remove-if to reduce duplicates in the union of lists X Y"
    (append x (remove-if #'(lambda (e)
                             (member e x))
                         y)))

  ;; 7.15
  (defun rank (card)
    "Returns the rank of a card"
    (first card))

  (defun suit (card)
    "Returns the suit of a card"
    (second card))
  (rank '(2 clubs))
  (suit '(2 clubs))

  (setf my-hand
        '((3 hearts)
          (5 clubs)
          (2 diamonds)
          (4 diamonds)
          (ace spades)))
  (defun count-suit (suit hand)
    "Counts the number of cards belonging to SUIT in list HAND"
    (length (remove-if-not #'(lambda (e)
                               (equal suit (second e)))
                           hand)))
  (count-suit 'diamonds my-hand)

  (setf colors
        '((clubs black)
          (diamonds red)
          (hearts red)
          (spades black)))

  (defun color-of (card)
    "Returns the color of CARD"
    (second (assoc (second card) colors)))
  (color-of '(2 clubs))

  (defun first-red (hand)
    "Finds the first red suit of list HAND"
    (find-if (lambda (card) (equal (color-of card) 'red))
             hand))
  (first-red my-hand)

  (defun black-cards (hand)
    "Returns a list of black cards from HAND"
    (remove-if-not (lambda (card)
                     (equal (color-of card) 'black))
                   hand))

  (black-cards my-hand)


  (defun what-ranks (suit hand)
    "Finds the rank of all cards belonging to SUIT in HAND"
    (mapcar #'first 
            (remove-if-not (lambda (e)
                             (equal (suit e) suit))
                           hand)))

  (what-ranks 'diamonds my-hand)

  (setf all-ranks
        '(2 3 4 5 6 7 8 9 10 jack queen king ace))

  (defun beforep (x y l)
    "Returns true if X appears before Y in L"
    (member y (member x l)))

  (defun higher-rank-p (c1 c2)
    "Takes two cards and returns the higher rank card"
    (if (beforep (rank c1) (rank c2) all-ranks)
        c2 c1))

  (higher-rank-p '(5 hearts) '(3 clubs))

  (defun high-card (hand)
    "Finds the highest rank within HAND"
    (reduce #'higher-rank-p hand))

  (high-card my-hand)
#+end_src
** reduce operator
#+begin_src lisp

  (reduce #'+ '(1 2 3))
  (reduce #'* '(1 2 4))

  (reduce #'append '((one un) (two deux) (three trois)))
  ;; 7.16 union
  (reduce #'union '((a b c) (c d a) (f b d) (g)))
  ;; 7.17
  (defun total-length (lst)
    "Given LST find total number of elements"
    (length (reduce #'append lst)))

  (total-length '((a b c) (c d a) (f b d) (g)))

  ;; 7.18 because 0 in addition or 1 in multiplication does not affect
  ;; the end result


#+end_src

** every
#+begin_src lisp
  (every #'numberp '(1 2 3 4 5))

  (every (lambda (x) (> x 0)) '(1 2 3 4 5))

  ;; 7.19
  (defun all-odd (lst)
    "doc"
    (every #'oddp lst))
  ;; 7.20
  (defun none-odd (lst)
    "Returns T if every element is not odd"
    (every #'evenp lst))

  (defun not-all-odd (lst)
    "Returns T if LST is not entirely odd"
    (not (all-odd lst)))

  (defun not-none-odd (lst)
    "Returns T if LST is not entirely even"
    (not (none-odd lst)))

  ;; 7.23 -> the same for the last two, would rename to 'not-uniform' and
  ;; merge

  ;; 7.24 -> Applicative operators are functions that apply other funcs to
  ;; data structs

  ;; 7.25 -> lambda expressions are useful with applicative operators since
  ;; you do not need to go define a func to only use it in an operator

  ;; 7.26 ->
  (defun my-find-if (fnc lst)
    "Return the first element that satisfies FNC in LST"
    (first (remove-if-not fnc lst)))

  (my-find-if #'oddp '(2 5 3 4 1))

  ;; 7.27
  (defun my-every (fnc lst)
    "Return if all elements in LST satisfy FNC"
    (equal (remove-if fnc lst) nil))

  (my-every #'oddp '(1 3 5 7 9))

  ;; trace func
  (trace my-every)


  (defun half (n) (* n 0.5))

  (defun average (x y)
    (+ (half x)
       (half y)))

  (trace half average)
  (average 3 7)

#+end_src
** BACKLOG keyboard exercise & extras, for review

#+begin_src lisp
  ;; 7.29

#+end_src
* Chapter 8: Recursion

#+begin_src lisp


  (defun anyoddp (x)
    (cond ((null x) nil)
          ((oddp (first x)) t)
          (t (anyoddp (rest x)))))
  (if-anyoddp '(2 4 7 8))

  (trace anyoddp)

  ;; 8.2
  (defun if-anyoddp (x)
    (if (null x) nil
        (if (oddp (first x))
            t
            (if-anyoddp (rest x)))))


  (defun fact (n)
    "factorial"
    (cond ((zerop n) 1)
          (t (* n (fact (- n 1))))))

  (trace fact)
  (fact 20.0)
  (fact 20)

  (defun laugh (n)
    (cond ((< n 1) nil)
          (t (cons 'ha (laugh (- n 1))))))

  (laugh 3)
  (laugh 5)
  (laugh -1)
  (laugh 0)

  ;; 8.5
  (defun add-up (x)
    (cond ((null x) 0)
          (t (+ (first x) (add-up (rest x))))))

  (add-up '(2 3 7))

  ;; 8.6
  (defun alloddp (x)
    (cond ((null x) t)
          ((evenp (first x)) nil)
          (t (alloddp (rest x)))))

  (alloddp '(3 7 9))

  ;; 8.7
  (defun rec-member (el lst)
    (cond ((null lst) nil)
          ((equal el (first lst)) lst)
          (t (rec-member el (rest lst)))))
  (member 3 '(7 1 2 5 4 2 3 4 5))
  (rec-member 3 '(7 1 2 5 4 2 3 4 5))

  ;; 8.8
  (defun rec-assoc (el x)
    (cond ((null x) nil)
          ((equal el (first (first x))) (first x))
          (t (rec-assoc el (rest x)))))

  (setf bananas
        '((red japan)
          (blue germany)))
  (assoc 'red bananas)
  (rec-assoc 'red bananas)

  ;; 8.9
  (defun rec-nth (n lst)
    (cond ((null lst) nil)
          ((zerop n) (first lst))
          (t (rec-nth (- n 1) (rest lst)))))

  (nth 2 '(2 3 4 5 1))
  (rec-nth 2 '(2 3 4 5))

  ;; 8.11
  (defun fib (n)
    (cond ((< n 2) 1)
          (t (+
              (fib (- n 1))
              (fib (- n 2))))))

  (fib 4)
  ;; 8.12
  ;; will recurse infinitely w/ circular list

  ;; 8.13 give negative input
  ;; 8.14
  ;; (defun rec ()
  ;;   (rec))

  ;; 8.15
  ;; car is x
  ;; cdr is the same list
  ;; recurse infinitely

#+end_src
** BACKLOG visit recursion more in-depth when wanted

* Chapter 9: I/O

#+begin_src lisp
  (format t "Hello, World!")
  (format t "Hello... ~% World.")

  (defun multi-print ()
    (format t "~&Hello... ")
    (format t "~&~&~&World."))
  (multi-print)


  (defun multi-print2 (x)
    (format t "~&Hello... ~S" x)
    (format t "~&~&~&World. ~A" x))
  (multi-print2 "hi")

  ;; 9.2
  (defun draw-line (num)
    (cond ((< num 0) nil)
          (t (progn
               (format t "*")
               (draw-line (- num 1))))))

  (draw-line 10)

  ;; read
  (defun my-square ()
    (format t "Please type in a number: ")
    (let ((x (read)))
      (format t "The number ~S squared is ~S.~%"
              x (* x x))))
  (format t "a~S" `b)

  ;; 9.10
  (defun space-over (n)
    "Prints N spaces"
    (cond ((zerop n) nil)
          ((< n 0) (format t "Error!"))
          (t
           (format t " ")
           (space-over (- n 1)))))

  (defun space-test (n)
    (format t "~%>>>")
    (space-over n)
    (format t "<<<"))
  (space-test 5)

  (defun plot-one-point (plotting-string y-val)
    (format t "`")
    (space-over y-val)
    (format t "~A~%" plotting-string))
  (plot-one-point "***" 3)

  (defun plot-points (plotting-string y-vals)
    (mapcar (lambda (y-val)
              (plot-one-point plotting-string y-val))
            y-vals))
  (plot-points "<>" '(4 6 8 10 8 6 4))

  (defun generate (m n)
    (cond ((equal m n) (cons n nil))
          ((> m n) (format t "Error! M is greater than N."))
          (t (cons m (generate (+ m 1) n)))))
  (generate -3 3)
  (generate 3 -3)


  (defun prompt-read (prompt)
    (format t "~a: " prompt)
    (read))

  (defun square (n)
    (* n n))

  (defun make-graph ()
    (let ((func (prompt-read "Function to graph?"))
          (x-start (prompt-read "Starting x value?"))
          (x-end (prompt-read "Ending x value?"))
          (plotting-string (prompt-read "Plotting string?")))
      (plot-points plotting-string (mapcar func (generate x-start x-end)))))

  (make-graph)
#+end_src
